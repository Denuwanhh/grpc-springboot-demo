syntax = "proto3";
option java_multiple_files = true;
package demo.interfaces.grpc;

message Employee {
    int64 employeeID = 1;
    string employeeFirstName = 2;
    string employeeLastName = 3;
    fixed64 employeeDateOfBirth = 4;
    float employeeWorkingYears = 5;
}

// The Employee Service definition.
service EmployeeService {
    // Get employee By Employee ID
    // IDL of unary RPCs where the client sends a single request to the server and gets a single response back, just like a normal function call.
    rpc getEmployee (Employee) returns (Employee) {
    }
    
    // Get all employees by any given name
    rpc getAllEmployeesByIDList (stream Employee) returns (stream Employee) {
    }
    
    // Get employee By Employee ID
    //IDL of Client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream. Once the client has finished writing the messages, it waits for the server to read them and return its response. Again gRPC guarantees message ordering within an individual RPC call.
    rpc getMostExperiencedEmployee (stream Employee) returns (Employee) {
    }
}